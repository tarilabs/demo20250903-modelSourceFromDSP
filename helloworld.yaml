# PIPELINE DEFINITION
# Name: hello-pipeline
# Inputs:
#    recipient: str
# Outputs:
#    Output: str
components:
  comp-say-hello:
    executorLabel: exec-say-hello
    inputDefinitions:
      parameters:
        name:
          parameterType: STRING
        run_id:
          isOptional: true
          parameterType: STRING
        run_name:
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-say-hello:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - say_hello
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'model-registry'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.3'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef say_hello(name: str, run_id: str = None, run_name: str = None)\
          \ -> str:\n    hello_text = f'Hello, {name}!'\n    print(hello_text)\n\n\
          \    import os\n    try:\n        with open(\"/var/run/secrets/kubernetes.io/serviceaccount/token\"\
          , \"r\") as f:\n            user_token = f.read().strip()\n        print(\"\
          Token loaded successfully\")\n    except FileNotFoundError:\n        raise\
          \ ValueError(\"Service account token file not found\")\n    except Exception\
          \ as e:\n        raise ValueError(\"Couldn't read the token\", e)\n\n  \
          \  from model_registry import ModelRegistry\n    registry = ModelRegistry(\n\
          \        server_address=\"https://my-registry-rest.apps.rosa.mmortari-rosa2.otuf.p3.openshiftapps.com\"\
          ,\n        author=\"pipeline-author\",\n        user_token=user_token\n\
          \    )\n    print(\"Connected to ModelRegistry\")\n\n    print(\"assuming\
          \ the ML model is already stored at URI\")\n    # typically there is an\
          \ model: Input[Model] input parameter to this component, so model.uri would\
          \ be used:\n    some_uri = \"https://acme.org/somewhere/model.safetensors\"\
          \n    model_name = \"my-model\"\n    model_version = \"v1-\"+run_id\n  \
          \  registry.register_model(\n        name=model_name,\n        uri=some_uri,\n\
          \        version=model_version,\n        description=\"this is my model\
          \ version description\",\n        model_format_name=\"vLLM\",\n        model_format_version=\"\
          1\",\n        storage_key=\"odh-connection-resource-name\",\n        model_source_class=\"\
          pipelinerun\",\n        model_source_group=\"ds-prj1\", # here is Data Science\
          \ Project, K8s namespace\n        model_source_id=run_id,\n        model_source_kind=\"\
          kfp\",\n        model_source_name=run_name,\n        metadata={\n      \
          \      # can be one of the following types\n            \"int_key\": 1,\n\
          \            \"bool_key\": False,\n            \"float_key\": 3.14,\n  \
          \          \"str_key\": \"str_value\",\n        }\n    )\n    return hello_text\n\
          \n"
        image: registry.redhat.io/ubi9/python-311
pipelineInfo:
  name: hello-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: say-hello
    tasks:
      say-hello:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-say-hello
        inputs:
          parameters:
            name:
              componentInputParameter: recipient
            run_id:
              runtimeValue:
                constant: '{{$.pipeline_job_uuid}}'
            run_name:
              runtimeValue:
                constant: '{{$.pipeline_job_name}}'
        taskInfo:
          name: say-hello
  inputDefinitions:
    parameters:
      recipient:
        parameterType: STRING
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.3
